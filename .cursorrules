# 环境说明
当前是windows系统，注意使用windows命令行而非linux命令行。

# 使用说明

## 1. 文件管理和记录
在与用户交互过程中，如果你发现项目中有任何可重用的内容（例如：库的版本、模型名称），特别是关于你犯的错误的修复或收到的纠正，你应该在 `experience.md` 文件做记录，以避免再次犯同样的错误。

## 2. 任务规划和进度追踪
### 2.1 草稿本使用规范
你应该使用 `scratchpad.md` 文件作为草稿本来组织你的想法。每次收到新任务时，按以下步骤操作：

1. 首先查看草稿本的内容，了解历史上下文
2. 必要时清除旧的不相关任务内容
3. 用markdown二级标题写明新任务名称和时间
4. 解释新任务内容和目标
5. 规划完成任务所需的具体步骤

### 2.2 任务进度标记
使用以下格式记录任务进度：
```markdown
## 任务：[任务名称] - [日期]
### 目标
[简要描述任务目标]

### 计划步骤
[ ] 1. 第一步：[具体行动]
    - 预期结果：[描述]
    - 可能风险：[描述]
[X] 2. 第二步：[已完成的步骤]
    - 完成时间：[时间]
    - 实际结果：[描述]
[ ] 3. 第三步：[下一步计划]
    - 依赖条件：[描述]
    - 预计耗时：[估算]

### 遇到的问题
1. [问题描述]
   - 原因：[分析]
   - 解决方案：[描述]
   - 经验总结：[总结]

### 里程碑
- [X] 里程碑1：[描述] (完成时间)
- [ ] 里程碑2：[描述] (预计完成时间)
```

### 2.3 进度更新规则
1. **任务开始时**：
   - 创建新的任务节点
   - 列出所有预期步骤
   - 标记优先级和依赖关系

2. **执行过程中**：
   - 每完成一个步骤立即更新状态
   - 记录实际执行结果与计划的差异
   - 如遇问题，及时记录并分析

3. **里程碑达成时**：
   - 总结完成的功能点
   - 记录关键决策和解决方案
   - 更新整体进度百分比
   - 规划下一个里程碑目标

4. **任务完成时**：
   - 总结所有完成的工作
   - 记录可复用的经验到 `experience.md`
   - 标记整个任务为完成状态
   - 创建下一个任务的初步计划

### 2.4 进度反思与规划
每个重要节点都应进行反思和规划：

1. **日常反思**：
   - 这一步完成了什么？
   - 遇到了什么问题？
   - 下一步的重点是什么？

2. **里程碑反思**：
   - 目标达成度分析
   - 时间效率评估
   - 经验教训总结
   - 下一阶段优化建议

3. **风险跟踪**：
   - 记录潜在风险
   - 制定预防措施
   - 准备应急方案

### 2.5 与其他文档的联动
- 重要经验同步更新到 `experience.md`
- 技术决策同步更新到相关文档
- 发现的问题同步更新到问题跟踪系统
- 代码变更同步更新到版本控制说明

## 3. 项目文档结构
你需要了解并经常参考以下关键文档：
- `fileNames.md`：项目地图，列出所有文件和目录及其功能描述
- `docs/prd.md`：产品需求文档
- `docs/app-flow.md`：应用流程
- `docs/tech-stack.md`：技术栈
- `docs/file-structure.md`：文件结构
- `docs/frontend-guidelines.md`：前端指南

## 4. 错误处理和新功能开发
### 错误修复流程：
1. 分析错误原因
2. 创建分步解决方案
3. 验证修复效果
4. 在 `experience.md` 中记录经验教训

### 新功能开发流程：
1. 阅读相关文档理解需求范围
2. 创建实现计划
3. 在执行前解释将要更改的内容
4. 按步骤实施更改
5. 验证功能实现

## 5. 代码生成和修改原则
1. 始终使用思维链逻辑创建分步实现计划
2. 详细概述功能的每个部分，提供高层次视图
3. 将复杂功能分解为详细的编号步骤
4. 在进行重要修改前，先提供计划供确认
5. 确保所有操作符合项目要求和规范

## 6. 工作会话管理
每个工作会话结束时：
1. 总结本次完成的工作内容
2. 记录遇到的问题和解决方案
3. 为下一个工作会话创建详细计划
4. 确保所有更改都已正确记录

## 7. 上下文优化
1. 始终关注必要的上下文信息
2. 避免处理无关文件和目录
3. 保持响应简洁且针对性强
4. 优先使用项目内现有的解决方案
